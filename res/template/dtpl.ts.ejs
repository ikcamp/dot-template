import * as _ from '<%=ref.interface%>'
import * as os from 'os'

/**
 * TODO:
 */
export function getTemplates(source: _.Source): _.IUserTemplate[] {
  return [
    {
      // 指定 html 文件模板，匹配所有创建的以 .html 结尾的文件
      // 你可以随便在项目中创建个 html 文件试试看
      name: 'templates/any.html.dtpl',
      matches: '*.html'
    },

    {
      // js 模板，在 sample 目录创建的所有以 js 结尾的文件都会使用此模板
      name: 'templates/sample.js.dtpl',
      matches: ['sample/**/*.js'],

      // 创建 js 文件的关联的样式文件
      related: (data: _.IData, fileContent: string) => {
        let ref = `./styles/${data.rawModuleName}.css`
        return {
          relativePath: ref,              // 要创建的文件的路径
          reference: `require('${ref}')`, // 要插入在 js 文件中的引用
          smartInsertStyle: true          // 自动插入到合适的地方，只有插入样式在 js/ts 文件中才有效
        }
      }
    },

    {
      // 指定模板名称，需要在同目录下有个同名的文本文件或者文件夹
      name: 'folder-template',

      /**
       * 匹配『在项目根目录创建 sample 文件夹』或者『在项目根目录创建 sample/foo 文件夹』的行为
       *
       * 因为设置了 minimatch 为 false，所以会匹配全路径，
       * 如果将 minimatch 设置为 true，则会匹配到在项目任何地方创建对应文件夹的行为
       */
      matches: ['sample', 'sample/foo'],
      minimatch: false,

      /**
       * 当用户创建了指定的文件夹后，系统会自动复制此模板文件夹下的所有文件到这个新创建的文件
       *
       * - 返回 false 表示不要复制此文件
       * - 返回 true 表示复制此文件
       * - 返回 {newContent: '...'} 表示修改复制后的文件内容
       * - 返回 {newName: 'foo.ts'} 表示修改复制后的文件的名称
       * - 返回 {newRelative: 'another/path/to/foo.ts'} 表示修改复制后的文件的路径
       * - newRelative 和 newName 不需要同时设置，同时设置了优先使用 newRelative
       */
      filter(copySource: _.ICopySource): boolean | _.ICopyFilterResult {
        // 给每个文件添加一个 footer 信息
        let content = copySource.content
        let footer = 'Created by [dot-template](https://marketplace.visualstudio.com/items?itemName=qiu8310.dot-template), made by Mora(qiuzhongleiabc@126.com)'
        if (/\.(jsx?|tsx?)$/.test(copySource.name)) {
          footer = '/*  ' + footer + '  */'
        } else {
          footer = '**' + footer + '**'
        }

        return {
          content: content + os.EOL + os.EOL + footer + os.EOL
        }
      },

      /**
       * 文件夹模板内的所有文件都复制完后会执行此函数
       *
       * 你可以用它来创建一些新文件，或者删除一些文件，总之任何 node 可以做的事你都可以在这里尝试
       */
      afterFilter(fromDir: string, toDir: string, result: _.ICopyResult): void {

      }
    }
  ]
}

/**
 * 生成自定义的数据，在渲染模板时会使用；注意，在创建三种不同的文件时，数据结构会有细微不一样
 *
 * - 创建文本文件
 *
 *  文件文件默认的 data 会和此函数返回的数据 merge
 *
 * - 创建关联文件
 *
 *  源文件和关联文件可能都会有它自己的模板，有它自己的 localData，
 *  所以它们的 data 会和各自的 localData 合并，有一点不一样的是，
 *  关联文件可以通过 ref 来引用源文件的所有 data 数据
 *
 * - 创建文件夹模板内的文件
 *
 *  模板文件夹内的文件都没有 localData，但它可以通过 ref 获取到文件夹模板的 data 数据，
 *  而文件夹模板是可以包含 localData 的
 */
export function getLocalData(template: _.IUserTemplate, source: _.Source): _.IObject {
  return {
    ga: 'UA-xxxxxxxx-xx'
  }
}
